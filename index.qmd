---
title: "Modeling spatial dependence through latent Gaussian models with spatial copulas"
subtitle: "Environmental and Ecological Statistics Conference 2025"
author:
  - name: Brynjólfur Gauti Guðrúnar Jónsson
institute: "University of Iceland"
format: 
  revealjs:
    theme: theme.scss
    simplemenu:
      flat: false
      barhtml:
        header: "<div class='menubar mb-10'><ul class='menu'></ul><div>"
        footer: "<div class='footer footer-default' style='display: block;'> <a href='https://bggj.is/envecostats25' target='_blank'>bggj.is/envecostats25</a></div>"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
revealjs-plugins:
  - simplemenu
bibliography: references.bib
csl: cambridge-university-press-numeric.csl
image: images/copula/max_smooth_station_scatterplot.png
---

```{r}
library(stdmatern)
library(INLA)
library(tidyverse)
library(gt)
library(evd)
```


## UK Climate Projections on a 5km Grid {data-name="Introduction"}

::: {.columns style="font-size:70%"}
::: {.column width="70%"}
-   UKCP Local Projections on a 5km grid over the UK (1980-2080) [@metoffi]
-   Challenge: Modeling maximum daily precipitation in yearly blocks
    -   43,920 spatial locations on a 180 x 244 grid
    -   99 years of projections
    -   Location-specific GEVt distributions
    -   Four parameters per location as in [@johannesson2021]
        -   Location, Trend, Scale, Shape
-   Two aspects of spatial dependence:
    1.  Parameter-level *(Latent Gaussian Models)*
    2.  Data-level *(Copulas)*
:::

::: {.column width="30%"}
![](images/ukcp_data.png){width="100%"}
:::
:::

## Extended LGM: Multivariate Link Function

::: {style="font-size:80%"}
- **Joint GEV model for precipitation extremes**  
  1) *Data:* $y_{i,t} \mid \mu_i, \sigma_i, \xi_i, \Delta_i, x_{i,t} \sim \text{GEV}(\mu_{i,t}, \sigma_i, \xi_i)$ where $\mu_{i,t} = \mu_i \cdot (1 + \Delta_i x_{i,t})$
  2) *Latent field:* $\boldsymbol\eta_i = \begin{pmatrix} (\psi_1, \tau_1, \phi_1, \gamma_1)^\intercal \\  \vdots \\ (\psi_n, \tau_n, \phi_n, \gamma_n)^\intercal \end{pmatrix}  \sim \mathcal{N}(\boldsymbol{\mu}(\theta), \mathbf{Q}^{-1}(\theta))$ 

  $\qquad(\psi_i, \tau_i, \phi_i, \gamma_i) = (\log \mu_i, \log \sigma_i - \log \mu_i, f(\xi_i),  \log \Delta_i)$ [@johannesson2021]
  3) *Hyper-parameters:* $\theta =$ e.g. mean, range, variance, spatial correlation
:::

## Max-and-Smooth {data-name="Max-and-Smooth"}

::: {.columns style="font-size:60%"}
### Two-Step Approach
::: {.column width="50%"}

1. **Max Step**: Maximum Likelihood
   - Independent local estimates $\hat{\eta}_i$
   - Asymptotic normality:
$$
\hat{\eta}_i \stackrel{a}{\sim} N(\eta_i, \mathbf{Q}_{\eta y,i}^{-1})
$$
   - Observed information matrix $\mathbf{Q}_{\eta y,i} = -\nabla^2\ell_i(\hat{\eta}_i)$

:::
::: {.column width="50%"}

2. **Smooth Step**: Spatial Model
   - Gaussian approximation:
$$
\hat{\eta} \mid \eta \sim N(\eta, \mathbf{Q}_{\eta y}^{-1})
$$
   - Latent field prior:
$$
\eta \mid \theta \sim N(\boldsymbol \mu(\theta), \mathbf{Q}_\eta(\theta)^{-1})
$$
   - Hyperprior: $p(\theta)$
:::
:::

::: {style="font-size:65%; margin-top:20px;"}

**Conceptually**: MLEs $\hat{\eta}_i$ and precision matrices $\mathbf{Q}_{\eta y,i}$ are sufficient statistics. 

> “...you can actually gain information by throwing information away...”
>
> Stephen M. Stigler, The Seven Pillars of Statistical Wisdom
:::




## Computational Implementation

::: {style="font-size:65%"}
### Efficient Two-Stage Implementation

::: {.columns}
::: {.column width="50%"}
**Max Step (TMB)**

- Template Model Builder [@kristensen2016] for maximum likelihood
- Automatic differentiation
- Parallel processing of station-wise estimates
- Efficient sparse Hessians
:::

::: {.column width="50%"}
**Smooth Step (Stan)**

- Full Bayesian posterior via HMC [@carpenter2017]
- BYM2 spatial prior implementation
- Scales well to large number of parameters
- Use `csr_times_vector()` for data-level likelihood

:::
:::

1. Get MLEs and Hessians from TMB
2. Pass $\hat \eta$ and CSR version of $L_{\eta y}$ into Stan
3. Stan gives full posterior of Gaussian-Gaussian model

:::


## Max vs. Smooth

![](images/iid/max_smooth_compare.png){fig-align="center"}

## 

::: {.columns}
::: {.column width="25%"}
![](images/iid/psi.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/tau.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/phi.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/gamma.png){width=100%}
:::
:::


## 

::: {.columns}
::: {.column width="25%"}

![](images/iid/mu.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/sigma.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/xi.png){width=100%}
:::
::: {.column width="25%"}
![](images/iid/Delta.png){width=100%}
:::
:::

## 

![](images/jonahjameson.png){fig-align="center"}

## From Data-level Independence to Dependence

::: {.columns style="font-size:60%"}
::: {.column width="50%"}

### Parameter-level Dependence

- Assumes conditional independence
- Biased joint probability estimates
- Underestimates parameter variance

:::



::: {.column width="50%"}
### Copula

- Improves joint probabilities
- Enhances spatial risk assessment
- Better variance estimates
:::
:::



::: {style="font-size:65%; margin-top:20px;"}
**Sklar's Theorem**: For any multivariate distribution $H$, there exists a unique copula $C$ such that:


$$
H(\mathbf x) = C(F_1(x_1), \dots, F_d(x_d))
$$

where $F_i$ are marginal distributions. We can also write this as a density

$$
h(x) = c(F_1(x_1), \dots, F_d(x_d)) \prod_{i=1}^d f_i(x_i)
$$

:::

## Copulas? {data-name="Copulas"}

```{r}
#| include: false
library(stdmatern)
library(tidyverse)
library(evd)
library(sparseMVN)
library(bggjphd)
theme_set(theme_bggj())
options(width = 648)
```

```{r}
#| echo: false

set.seed(5)
Q <- make_AR_prec_matrix(dim = 60, rho = 0.9)
Z <- rmvn.sparse(n = 1, mu = rep(0, nrow(Q)), CH = Cholesky(Q)) |>
  as.numeric()
```

```{r}
#| echo: false
tibble(
  Z = Z
) |>
  mutate(
    time = row_number()
  ) |>
  ggplot(aes(x = time, y = Z)) +
  geom_line() +
  scale_x_continuous(
    breaks = scales::breaks_pretty(n = 10),
    guide = ggh4x::guide_axis_truncated(trunc_lower = 0, trunc_upper = 60)
  ) +
  scale_y_continuous(
    guide = ggh4x::guide_axis_truncated()
  ) +
  labs(
    x = "Time",
    y = "Z"
  )
```

## Gaussian AR(1) Process

```{r}
#| echo: true
#| eval: false
Q <- make_AR_prec_matrix(dim = 60, rho = 0.9)
Z <- rmvn.sparse(n = 1, mu = rep(0, nrow(Q)), CH = Cholesky(Q)) |>
  as.numeric()
```

```{r}
#| echo: false
tibble(
  Z = Z
) |>
  mutate(
    time = row_number()
  ) |>
  ggplot(aes(x = time, y = Z)) +
  geom_line() +
  scale_x_continuous(
    breaks = scales::breaks_pretty(n = 10),
    guide = ggh4x::guide_axis_truncated(trunc_lower = 0, trunc_upper = 60)
  ) +
  scale_y_continuous(
    guide = ggh4x::guide_axis_truncated()
  ) +
  labs(
    x = "Time",
    y = "Z"
  )
```

## Copula?

```{r}
#| echo: false
U <- pnorm(Z)
Y <- qgev(U, loc = 11, scale = 4, shape = 0.2)
```

```{r}
#| echo: false
tibble(
  Y = Y
) |>
  mutate(
    time = row_number()
  ) |>
  ggplot(aes(x = time, y = Y)) +
  geom_line() +
  scale_x_continuous(
    breaks = scales::breaks_pretty(n = 10),
    guide = ggh4x::guide_axis_truncated(trunc_lower = 0, trunc_upper = 60)
  ) +
  scale_y_continuous(
    guide = ggh4x::guide_axis_truncated()
  ) +
  labs(
    x = "Time",
    y = "Y"
  )
```

## GEV AR(1) Process?

```{r}
#| echo: true
U <- pnorm(Z)
Y <- qgev(U, loc = 11, scale = 4, shape = 0.2)
```

```{r}
#| echo: false
tibble(
  Y = Y
) |>
  mutate(
    time = row_number()
  ) |>
  ggplot(aes(x = time, y = Y)) +
  geom_line() +
  scale_x_continuous(
    breaks = scales::breaks_pretty(n = 10),
    guide = ggh4x::guide_axis_truncated(trunc_lower = 0, trunc_upper = 60)
  ) +
  scale_y_continuous(
    guide = ggh4x::guide_axis_truncated()
  ) +
  labs(
    x = "Time",
    y = "Y"
  )
```

## From Gaussian to GEV

```{r}
tibble(
  Z = Z,
  U = U,
  Y = Y
) |>
  mutate(
    time = row_number()
  ) |>
  pivot_longer(
    cols = c(Z, U, Y),
    names_to = "variable",
    values_to = "value"
  ) |>
  mutate(
    variable = fct_relevel(variable, "Z", "U") |>
      fct_recode(
        "Gaussian" = "Z",
        "Uniform" = "U",
        "GEV" = "Y"
      )
  ) |>
  ggplot(aes(x = time, y = value)) +
  geom_line() +
  scale_x_continuous(
    breaks = scales::breaks_pretty(n = 10),
    guide = ggh4x::guide_axis_truncated(trunc_lower = 0, trunc_upper = 60)
  ) +
  scale_y_continuous(
    guide = ggh4x::guide_axis_truncated()
  ) +
  facet_wrap(~variable, scales = "free_y")
```

## Spatial Gaussian Data

```{r}
#| echo: false

set.seed(5)
dim1 <- 300
dim2 <- 150
rho1 <- 0.6
rho2 <- 0.9
nu <- 2
Z <- rmatern_copula_eigen(1, dim1, dim2, rho1, rho2, nu)
```

```{r}
#| echo: false
tibble(
  Z = as.numeric(Z[, 1])
) |>
  mutate(
    x = rep(seq_len(dim1), each = dim2),
    y = rep(seq_len(dim2), times = dim1),
  ) |>
  ggplot(aes(x, y, fill = Z)) +
  geom_raster() +
  scale_fill_distiller(palette = "RdBu") +
  coord_fixed(expand = FALSE)
```

## Transformed to Uniform

```{r}
#| echo: false
tibble(
  Z = as.numeric(Z[, 1]),
  U = pnorm(Z)
) |>
  mutate(
    x = rep(seq_len(dim1), each = dim2),
    y = rep(seq_len(dim2), times = dim1),
  ) |>
  ggplot(aes(x, y, fill = U)) +
  geom_raster() +
  scale_fill_distiller(
    palette = "RdBu",
    limits = c(0, 1)
  ) +
  coord_fixed(expand = FALSE)
```

## Transformed to GEV(11, 4, 0.2)

```{r}
#| echo: false
tibble(
  Z = as.numeric(Z[, 1]),
  U = pnorm(Z),
  Y = qgev(U, loc = 11, scale = 4, shape = 0.2)
) |>
  mutate(
    x = rep(seq_len(dim1), each = dim2),
    y = rep(seq_len(dim2), times = dim1),
  ) |>
  ggplot(aes(x, y, fill = Y)) +
  geom_raster() +
  scale_fill_distiller(
    palette = "RdBu"
  ) +
  coord_fixed(expand = FALSE)
```

## It's just a density

![](images/predator.jpg){fig-align="center"}

## Large-Scale Spatial Gaussian Copula?

::: {style="font-size:55%"}

$$
\begin{gathered}
\log h(\mathbf x) = \log c\left(F_1(x_1), \dots, F_d(x_d)\right) + \sum_{i=1}^d \log f_i(x_i)
\end{gathered}
$$

------------------------------------------------------------------------

::: columns

::: {.column width="50%"}
### Marginal CDFs

-   $F_i(x_i)$ is $\mathrm{GEV}(\mu_i, \sigma_i, \xi_i)$
-   Can model parameter dependence with BYM2
:::

::: {.column width="50%"}
$$
\begin{aligned}
\log h(\mathbf x) &= \log c(u_1, \dots, u_d) \\
&+ \sum_{i=1}^d \log f_{\mathrm{GEV}}(x_i \vert \mu_i, \sigma_i, \xi_i) \\
u_i &= F_{\mathrm{GEV}}(x_i \vert \mu_i, \sigma_i, \xi_i)
\end{aligned}
$$
:::
:::

------------------------------------------------------------------------

::: columns
### Gaussian Copula

::: {.column width="50%"}
-   Matérn-like precision matrix $\mathbf{Q}$ [@lindgren2011]
-   If $\mathbf{Q} = \mathbf{I}$ simplifies to independent margins
-   Scaled so $\boldsymbol{\Sigma} = \mathbf{Q}^{-1}$ is correlation matrix
-   Need to calculate marginal variances [@rue2005a; @rue2007; @rue2009]
-   How to generate, scale and compute with $\mathbf{Q}$ quickly (for MCMC)?
:::

::: {.column width="50%"}
$$
\begin{aligned}
\log c(\mathbf u) &\propto \frac{1}{2}\left(\log |\mathbf{Q}| - \mathbf{z}^T\mathbf{Q}\mathbf{z} + \mathbf{z}^T\mathbf{z}\right) \\
\mathbf{z} &= \Phi^{-1}(\mathbf u)
\end{aligned}
$$
:::
:::
:::



## Copula-Extended Max-and-Smooth {data-name="Copula-Extension"}

::: {.columns style="font-size:60%"}
### Three-Step Approach with Spatial Dependence

1. **Copula Step**: Copula Parameters
    - Estimate copula parameters $(\rho_1, \rho_2)$ using empirical CDF

::: {.column width="50%"}

2. **Max Step**: Copula-Based Likelihood
   - Joint estimation across replicates (not locations):
   $$
   \ell(\theta|Y) = \sum_{t=1}^T \left[\ell_{\text{GEV}}(Y_{t}) + \ell_{\text{copula}}(Z_t)\right]
   $$
   - Where $Z_t = \Phi^{-1}(F_{\text{GEV}}(Y_t))$
   - Precision matrix $\mathbf{Q}$ with parameters $\rho_1, \rho_2, \nu$

:::
::: {.column width="50%"}

3. **Smooth Step**: Enhanced Spatial Model
   - Unchanged Gaussian approximation:
   $$
   \hat{\eta} \mid \eta \sim N(\eta, \mathbf{Q}_{\eta y}^{-1})
   $$
   - Now $\mathbf{Q}_{\eta y}$ includes dependence information from copula
   - Parameter-level spatial priors:
   $$
   \eta \mid \theta \sim N(0, \mathbf{Q}_\eta(\theta)^{-1})
   $$
:::
:::

## Hessians

::: {.columns}
::: {.column width="50%"}
![](images/iid/hessian.png)
:::
::: {.column width="50%"}
![](images/copula/hessian.png)
:::
:::

## Cholesky Factors

::: {.columns}
::: {.column width="50%"}
![](images/iid/L.png)
:::
::: {.column width="50%"}
![](images/copula/L.png)
:::
:::

## Computational Implementation

::: {style="font-size:65%"}
### Efficient Three-Stage Implementation

**Copula Step (recently finished)**

- Use `eigen` in C++ for efficient calculations as shown before

::: {.columns}
::: {.column width="50%"}
**Max Step (TMB)**

- Template Model Builder [@kristensen2016] for maximum likelihood
- Automatic differentiation
- Parallel processing of station-wise estimates
- Efficient sparse Hessians
:::

::: {.column width="50%"}
**Smooth Step (Stan)**

- Full Bayesian posterior via HMC [@carpenter2017]
- BYM2 spatial prior implementation [@riebler2016; @simpson2015]
- Scales well to large number of parameters
- Use `csr_times_vector()` for data-level likelihood
:::
:::
1. Estimate copula parameters using R package in development
2. Get MLEs and Hessians from TMB
3. Pass $\hat \eta$ and CSR version of $L_{\eta y}$ into Stan
4. Stan gives full posterior of Gaussian-Gaussian model
:::

## Results

![](images/compare/comparison.png)

## 

![](images/compare/iid_copula_compare.png)

##

![](images/compare/psi.png)

##

![](images/compare/mu.png)

##

![](images/compare/tau.png)

##

![](images/compare/sigma.png)

##

![](images/compare/phi.png)

##

![](images/compare/xi.png)

##

![](images/compare/gamma.png)

##

![](images/compare/Delta.png)

## Summary and Conclusions

::: {style="font-size:65%"}

::: {.columns}
::: {.column width="50%"}
**Methodology**

- Copula-Extended Latent Gaussian Model
- Matérn-like Gaussian copula implementation
- Max-and-Smooth for fast large-scale inference
:::

::: {.column width="50%"}
**Computational Implementation**

- Three-stage pipeline combining specialized tools:
  1. Copula parameter estimation
  2. TMB for ML and sparse Hessians
  3. Stan for fast Gaussian-Gaussian posterior sampling
:::
:::

**Future Direction**

- Application to full UKCP Local Projections (5km grid)
- Extension to linear predictors and space-time dependence
- t-copula for tail dependence
- Integration with risk assessment frameworks
- Further software development for better user interface
:::

# References

::: {#refs style="font-size:55%"}
:::
